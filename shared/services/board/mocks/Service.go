// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import board "github.com/dmibod/kanban/shared/services/board"
import context "context"
import kernel "github.com/dmibod/kanban/shared/kernel"
import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AppendLane provides a mock function with given fields: _a0, _a1
func (_m *Service) AppendLane(_a0 context.Context, _a1 kernel.MemberID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kernel.MemberID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *Service) Create(_a0 context.Context, _a1 *board.CreateModel) (kernel.ID, error) {
	ret := _m.Called(_a0, _a1)

	var r0 kernel.ID
	if rf, ok := ret.Get(0).(func(context.Context, *board.CreateModel) kernel.ID); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(kernel.ID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *board.CreateModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Describe provides a mock function with given fields: _a0, _a1, _a2
func (_m *Service) Describe(_a0 context.Context, _a1 kernel.ID, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kernel.ID, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExcludeLane provides a mock function with given fields: _a0, _a1
func (_m *Service) ExcludeLane(_a0 context.Context, _a1 kernel.MemberID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kernel.MemberID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *Service) GetByID(_a0 context.Context, _a1 kernel.ID) (*board.Model, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *board.Model
	if rf, ok := ret.Get(0).(func(context.Context, kernel.ID) *board.Model); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*board.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, kernel.ID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOwner provides a mock function with given fields: _a0, _a1
func (_m *Service) GetByOwner(_a0 context.Context, _a1 string) ([]*board.ListModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*board.ListModel
	if rf, ok := ret.Get(0).(func(context.Context, string) []*board.ListModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*board.ListModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Layout provides a mock function with given fields: _a0, _a1, _a2
func (_m *Service) Layout(_a0 context.Context, _a1 kernel.ID, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kernel.ID, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields: _a0, _a1, _a2
func (_m *Service) Name(_a0 context.Context, _a1 kernel.ID, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kernel.ID, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: _a0, _a1
func (_m *Service) Remove(_a0 context.Context, _a1 kernel.ID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kernel.ID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Share provides a mock function with given fields: _a0, _a1, _a2
func (_m *Service) Share(_a0 context.Context, _a1 kernel.ID, _a2 bool) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kernel.ID, bool) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
