// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import kernel "github.com/dmibod/kanban/shared/kernel"
import mock "github.com/stretchr/testify/mock"
import services "github.com/dmibod/kanban/shared/services"

// CardService is an autogenerated mock type for the CardService type
type CardService struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *CardService) Create(_a0 context.Context, _a1 *services.CardPayload) (*services.CardModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *services.CardModel
	if rf, ok := ret.Get(0).(func(context.Context, *services.CardPayload) *services.CardModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.CardModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *services.CardPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0
func (_m *CardService) GetAll(_a0 context.Context) ([]*services.CardModel, error) {
	ret := _m.Called(_a0)

	var r0 []*services.CardModel
	if rf, ok := ret.Get(0).(func(context.Context) []*services.CardModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*services.CardModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *CardService) GetByID(_a0 context.Context, _a1 kernel.Id) (*services.CardModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *services.CardModel
	if rf, ok := ret.Get(0).(func(context.Context, kernel.Id) *services.CardModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.CardModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, kernel.Id) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByLaneID provides a mock function with given fields: _a0, _a1
func (_m *CardService) GetByLaneID(_a0 context.Context, _a1 kernel.Id) ([]*services.CardModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*services.CardModel
	if rf, ok := ret.Get(0).(func(context.Context, kernel.Id) []*services.CardModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*services.CardModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, kernel.Id) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: _a0, _a1
func (_m *CardService) Remove(_a0 context.Context, _a1 kernel.Id) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kernel.Id) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *CardService) Update(_a0 context.Context, _a1 *services.CardModel) (*services.CardModel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *services.CardModel
	if rf, ok := ret.Get(0).(func(context.Context, *services.CardModel) *services.CardModel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.CardModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *services.CardModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
